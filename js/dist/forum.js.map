{"version":3,"file":"forum.js","mappings":"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","sources":["webpack://@litalino/mason/webpack/bootstrap","webpack://@litalino/mason/webpack/runtime/compat get default export","webpack://@litalino/mason/webpack/runtime/define property getters","webpack://@litalino/mason/webpack/runtime/hasOwnProperty shorthand","webpack://@litalino/mason/webpack/runtime/make namespace object","webpack://@litalino/mason/external root \"flarum.core.compat['forum/app']\"","webpack://@litalino/mason/external root \"flarum.core.compat['common/Model']\"","webpack://@litalino/mason/external root \"flarum.core.compat['common/models/Discussion']\"","webpack://@litalino/mason/external root \"flarum.core.compat['common/models/Forum']\"","webpack://@litalino/mason/./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://@litalino/mason/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@litalino/mason/./src/common/models/Answer.ts","webpack://@litalino/mason/external root \"flarum.core.compat['common/utils/computed']\"","webpack://@litalino/mason/./src/common/models/Field.ts","webpack://@litalino/mason/./src/common/models/ByTag.ts","webpack://@litalino/mason/external root \"flarum.core.compat['common/extend']\"","webpack://@litalino/mason/external root \"flarum.core.compat['common/components/DiscussionComposer']\"","webpack://@litalino/mason/external root \"flarum.core.compat['components/Composer']\"","webpack://@litalino/mason/external root \"flarum.core.compat['common/helpers/icon']\"","webpack://@litalino/mason/external root \"flarum.core.compat['common/utils/ItemList']\"","webpack://@litalino/mason/external root \"flarum.core.compat['common/Component']\"","webpack://@litalino/mason/external root \"flarum.core.compat['common/utils/classList']\"","webpack://@litalino/mason/./src/common/helpers/sortByAttribute.ts","webpack://@litalino/mason/./src/forum/components/FieldEditDropdown.js","webpack://@litalino/mason/./src/forum/components/FieldEditText.js","webpack://@litalino/mason/external root \"flarum.core.compat['tags/utils/sortTags']\"","webpack://@litalino/mason/./src/forum/components/FieldEditTags.js","webpack://@litalino/mason/./src/forum/components/FieldGrid.js","webpack://@litalino/mason/./src/forum/helpers/chunkArray.ts","webpack://@litalino/mason/./src/forum/components/FieldsEditor.js","webpack://@litalino/mason/./src/forum/components/FieldsEditorByTags.js","webpack://@litalino/mason/./src/forum/components/ByTagsComposer.js","webpack://@litalino/mason/external root \"flarum.core.compat['tags/components/TagDiscussionModal']\"","webpack://@litalino/mason/external root \"flarum.core.compat['forum/utils/DiscussionControls']\"","webpack://@litalino/mason/external root \"flarum.core.compat['common/components/Button']\"","webpack://@litalino/mason/external root \"flarum.core.compat['common/components/Modal']\"","webpack://@litalino/mason/./src/forum/components/FieldsEditorModal.js","webpack://@litalino/mason/external root \"flarum.core.compat['common/components/DiscussionHero']\"","webpack://@litalino/mason/./src/forum/components/FieldsViewer.js","webpack://@litalino/mason/external root \"flarum.core.compat['common/components/CommentPost']\"","webpack://@litalino/mason/external root \"flarum.core.compat['common/components/DiscussionPage']\"","webpack://@litalino/mason/./src/forum/addFieldsOnDiscussionPost.js","webpack://@litalino/mason/./src/forum/index.js","webpack://@litalino/mason/./src/forum/addComposerFields.js","webpack://@litalino/mason/./src/forum/addFieldsOnDiscussionHero.js","webpack://@litalino/mason/./src/forum/addFieldUpdateControl.js","webpack://@litalino/mason/./src/forum/patchModelIdentifier.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Model'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/models/Discussion'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/models/Forum'];","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","import Model from 'flarum/common/Model';\r\nimport Field from './Field';\r\n\r\nexport default class Answer extends Model {\r\n    content = Model.attribute<string>('content');\r\n    is_suggested = Model.attribute<boolean>('is_suggested');\r\n    sort = Model.attribute<number | null>('sort');\r\n    field = Model.hasOne<Field>('field');\r\n\r\n    apiEndpoint() {\r\n        return '/litalino/mason/answers' + (this.exists ? '/' + this.data.id : '');\r\n    }\r\n}\r\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/computed'];","import Model from 'flarum/common/Model';\r\nimport computed from 'flarum/common/utils/computed';\r\nimport Answer from './Answer';\r\n\r\nexport default class Field extends Model {\r\n    name = Model.attribute<string>('name');\r\n    description = Model.attribute<string | null>('description');\r\n    min_answers_count = Model.attribute<number>('min_answers_count');\r\n    max_answers_count = Model.attribute<number>('max_answers_count');\r\n    show_when_empty = Model.attribute<boolean>('show_when_empty');\r\n    user_values_allowed = Model.attribute<boolean>('user_values_allowed');\r\n    validation = Model.attribute<string | null>('validation');\r\n    icon = Model.attribute<string | null>('icon');\r\n    sort = Model.attribute<number | null>('sort');\r\n    deleted_at = Model.attribute('deleted_at', Model.transformDate);\r\n    allAnswers = Model.hasMany<Answer>('allAnswers');\r\n    suggestedAnswers = Model.hasMany<Answer>('suggestedAnswers');\r\n    required = computed<boolean>('min_answers_count', (min_answers_count) => min_answers_count > 0);\r\n    multiple = computed<boolean>('max_answers_count', (max_answers_count) => max_answers_count > 1);\r\n\r\n    apiEndpoint() {\r\n        return '/litalino/mason/fields' + (this.exists ? '/' + this.data.id : '');\r\n    }\r\n}\r\n","import Model from 'flarum/common/Model';\r\n\r\nexport default class ByTag extends Model {\r\n    tag_name = Model.attribute('tag_name');\r\n    tag_id = Model.attribute('tag_id');\r\n    field_name = Model.attribute('field_name');\r\n    switch = Model.attribute('switch');\r\n\r\n    apiEndpoint() {\r\n        return '/litalino/mason/bytags' + (this.exists ? '/' + this.data.id : '');\r\n    }\r\n}\r\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/DiscussionComposer'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['components/Composer'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/helpers/icon'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/ItemList'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/Component'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/classList'];","export default function sortByAttribute<T extends { [k in K]: () => any }, K extends string | number | symbol>(items: T[], attr: K) {\r\n    if (!attr) attr = 'sort';\r\n    return items.sort((a, b) => a[attr]() - b[attr]());\r\n}\r\n","import app from 'flarum/forum/app';\r\nimport Model from 'flarum/common/Model';\r\nimport icon from 'flarum/common/helpers/icon';\r\nimport Component from 'flarum/common/Component';\r\nimport sortByAttribute from '@common/helpers/sortByAttribute';\r\n\r\nexport default class FieldEditDropdown extends Component {\r\n    view(vnode) {\r\n        // To be certain to not work on object copies, we always read the current one from vnode.attrs\r\n        const { field, answers, onchange } = vnode.attrs;\r\n\r\n        let selectedAnswerIdsForThisField = [];\r\n\r\n        (field.suggestedAnswers() || []).forEach((answer) => {\r\n            const answerIndex = answers.findIndex((a) => {\r\n                // Temporary store entries seem to turn into undefined after saving\r\n                if (typeof a === 'undefined') {\r\n                    return false;\r\n                }\r\n\r\n                return a.id() === answer.id();\r\n            });\r\n\r\n            if (answerIndex !== -1) {\r\n                selectedAnswerIdsForThisField.push(answer.id());\r\n            }\r\n        });\r\n\r\n        let relationshipInfo = {\r\n            field: {\r\n                data: Model.getIdentifier(this.field),\r\n            },\r\n        };\r\n\r\n        return (\r\n            <span className=\"Select\">\r\n                <select\r\n                    className=\"Select-input FormControl\"\r\n                    multiple={field.multiple()}\r\n                    onchange={(event) => {\r\n                        let answers = [];\r\n\r\n                        for (let option of event.target.options) {\r\n                            if (option.selected && option.value !== 'none') {\r\n                                const answerId = option.value;\r\n\r\n                                // This will only work with suggested answers for now\r\n                                // As they are the only ones registered in the store\r\n                                // answers.push(app.store.getById('mason-answers', answerId));\r\n\r\n                                // need to add field relationship in order to avoid JS error on\r\n                                // the text entry side\r\n                                let storeObj = app.store.getById('mason-answers', answerId);\r\n                                storeObj.data.relationships = relationshipInfo;\r\n                                answers.push(storeObj);\r\n                            }\r\n                        }\r\n\r\n                        onchange(answers);\r\n                    }}\r\n                >\r\n                    {!field.multiple() && (\r\n                        <option\r\n                            value=\"none\"\r\n                            selected={selectedAnswerIdsForThisField.length === 0}\r\n                            disabled={field.required()}\r\n                            hidden={this.placeholderHidden(field)}\r\n                        >\r\n                            {this.selectPlaceholder(field)}\r\n                        </option>\r\n                    )}\r\n                    {sortByAttribute(field.suggestedAnswers() || []).map((answer) => (\r\n                        <option value={answer.id()} selected={selectedAnswerIdsForThisField.indexOf(answer.id()) !== -1}>\r\n                            {answer.content()}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n                {icon('fas fa-caret-down', { className: 'Select-caret' })}\r\n            </span>\r\n        );\r\n    }\r\n\r\n    placeholderHidden(field) {\r\n        // If labels are hidden, we need to always show the default value (even if it can't be selected)\r\n        // Otherwise when the field is \"required\" you can't find the name of the field anymore once something is selected\r\n        if (app.forum.attribute('litalino-mason.labels-as-placeholders')) {\r\n            return false;\r\n        }\r\n\r\n        return field.required();\r\n    }\r\n\r\n    selectPlaceholder(field) {\r\n        let text = '';\r\n\r\n        if (app.forum.attribute('litalino-mason.labels-as-placeholders')) {\r\n            text += field.name();\r\n\r\n            if (field.required()) {\r\n                text += ' *';\r\n            }\r\n\r\n            text += ' - ';\r\n        }\r\n\r\n        if (field.required()) {\r\n            text += app.translator.trans('litalino-mason.forum.answers.choose-option');\r\n        } else {\r\n            text += app.translator.trans('litalino-mason.forum.answers.no-option-selected');\r\n        }\r\n\r\n        return text;\r\n    }\r\n}\r\n","import app from 'flarum/forum/app';\r\nimport Model from 'flarum/common/Model';\r\nimport Component from 'flarum/common/Component';\r\n\r\nexport default class FieldEditText extends Component {\r\n    oninit(vnode) {\r\n        super.oninit(vnode);\r\n\r\n        this.field = this.attrs.field;\r\n        this.answers = this.attrs.answers;\r\n        this.onchange = this.attrs.onchange;\r\n        this.inputId = 'FormControl mason-input-' + this.attrs.inputId;\r\n\r\n        this.content = '';\r\n        var answersForThisField = [];\r\n\r\n        if (typeof this.answers === 'undefined') {\r\n            answersForThisField = false;\r\n        } else {\r\n            answersForThisField = this.answers.filter((answer) => {\r\n                // Temporary store entries seem to turn into undefined after saving\r\n                if (typeof answer === 'undefined') {\r\n                    return false;\r\n                }\r\n\r\n                return answer.field().id() === this.field.id();\r\n            });\r\n        }\r\n\r\n        if (answersForThisField.length) {\r\n            // For now we only support a single custom answer\r\n            this.content = answersForThisField[0].content();\r\n        }\r\n    }\r\n\r\n    view() {\r\n        return (\r\n            <input\r\n                className=\"FormControl\"\r\n                required={this.field.required()}\r\n                value={this.content}\r\n                class={this.inputId}\r\n                oninput={(e) => {\r\n                    this.content = e.target.value;\r\n\r\n                    if (this.content === '') {\r\n                        this.onchange([]);\r\n                    } else {\r\n                        const answer = app.store.createRecord('mason-answers', {\r\n                            attributes: {\r\n                                content: this.content,\r\n                            },\r\n                            relationships: {\r\n                                field: {\r\n                                    data: Model.getIdentifier(this.field),\r\n                                },\r\n                            },\r\n                        });\r\n\r\n                        this.onchange([answer]);\r\n                    }\r\n                }}\r\n                placeholder={this.fieldPlaceholder()}\r\n            />\r\n        );\r\n    }\r\n\r\n    fieldPlaceholder() {\r\n        if (app.forum.attribute('litalino-mason.labels-as-placeholders')) {\r\n            return this.field.name() + (this.field.required() ? ' *' : '');\r\n        }\r\n\r\n        return '';\r\n    }\r\n}\r\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['tags/utils/sortTags'];","import app from 'flarum/forum/app';\r\nimport icon from 'flarum/common/helpers/icon';\r\nimport Component from 'flarum/common/Component';\r\nimport sortTags from 'flarum/tags/utils/sortTags';\r\nimport classList from 'flarum/common/utils/classList';\r\n\r\nexport default class DiscussionFields extends Component {\r\n    oninit(vnode) {\r\n        super.oninit(vnode);\r\n\r\n        this.tags = app.store.all('tags');\r\n        this.selectedTags = [];\r\n\r\n        if (this.attrs.discussion) {\r\n            this.tags = this.tags.filter((tag) => tag.canAddToDiscussion() || this.attrs.discussion.tags().indexOf(tag) !== -1);\r\n\r\n            this.selectedTags = this.attrs.discussion.tags();\r\n        } else {\r\n            this.tags = this.tags.filter((tag) => tag.canStartDiscussion());\r\n        }\r\n\r\n        this.minPrimary = app.forum.attribute('minPrimaryTags');\r\n        this.maxPrimary = app.forum.attribute('maxPrimaryTags');\r\n        this.minSecondary = app.forum.attribute('minSecondaryTags');\r\n        this.maxSecondary = app.forum.attribute('maxSecondaryTags');\r\n\r\n        // If primary tags are disabled, don't offer them\r\n        if (this.maxPrimary <= 0) {\r\n            this.tags = this.tags.filter((tag) => !tag.isPrimary());\r\n        }\r\n\r\n        // If secondary tags are disabled, don't offer them\r\n        if (this.maxSecondary <= 0) {\r\n            this.tags = this.tags.filter((tag) => tag.isPrimary());\r\n        }\r\n\r\n        this.tags = sortTags(this.tags);\r\n\r\n        this.inputUuid = Math.random().toString(36).substring(2);\r\n    }\r\n\r\n    view() {\r\n        if (this.maxPrimary > 1 || this.maxSecondary > 1) {\r\n            return <div className=\"Alert\">{app.translator.trans('litalino-mason.forum.tags.inadequate-settings')}</div>;\r\n        }\r\n\r\n        // We take the first child selected or if none, the first parent selected\r\n        // Of course this only works if a single tag or tag+parent is selected\r\n        // Multiple tags are not supported on this selector\r\n        const currentSelectedChild = this.selectedTags.length ? this.selectedTags.sort((tag) => (tag.parent() ? -1 : 1))[0].id() : null;\r\n        const inputUuid = this.inputUuid;\r\n        const required = this.fieldRequired();\r\n\r\n        return (\r\n            <div\r\n                className={classList('Mason-Field Form-group', {\r\n                    ['Mason-Field--label-as-placeholder']: app.forum.attribute('litalino-mason.labels-as-placeholders'),\r\n                })}\r\n            >\r\n                <label for={`fofMason-selectInput-${inputUuid}`}>{this.fieldLabel()}</label>\r\n                <span className=\"Select\">\r\n                    <select\r\n                        className=\"Select-input FormControl\"\r\n                        id={`fofMason-selectInput-${inputUuid}`}\r\n                        onchange={(event) => {\r\n                            const id = event.target.value;\r\n\r\n                            this.selectedTags = [];\r\n\r\n                            if (id !== 'none') {\r\n                                this.selectedTags.push(this.tags.find((tag) => tag.id() === id));\r\n\r\n                                const parent = this.selectedTags[0].parent();\r\n                                if (parent) {\r\n                                    this.selectedTags.push(parent);\r\n                                }\r\n                            }\r\n\r\n                            this.attrs.onchange(this.selectedTags);\r\n                        }}\r\n                    >\r\n                        <option value=\"none\" selected={this.selectedTags.length === 0} disabled={required} hidden={this.placeholderHidden()}>\r\n                            {this.selectPlaceholder()}\r\n                        </option>\r\n                        {this.tags.map((tag) => {\r\n                            const parent = tag.parent();\r\n\r\n                            return (\r\n                                <option value={tag.id()} selected={tag.id() === currentSelectedChild}>\r\n                                    {(parent ? parent.name() + ' | ' : '') + tag.name()}\r\n                                </option>\r\n                            );\r\n                        })}\r\n                        ,\r\n                    </select>\r\n                    {icon('fas fa-caret-down', { className: 'Select-caret' })}\r\n                </span>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    fieldRequired() {\r\n        return this.minPrimary > 0 || this.minSecondary > 0;\r\n    }\r\n\r\n    fieldLabel() {\r\n        let text = app.forum.attribute('litalino-mason.tags-field-name') || app.translator.trans('litalino-mason.forum.tags.tags-label');\r\n\r\n        if (this.fieldRequired()) {\r\n            text += ' *';\r\n        }\r\n\r\n        return text;\r\n    }\r\n\r\n    placeholderHidden() {\r\n        if (app.forum.attribute('litalino-mason.labels-as-placeholders')) {\r\n            return false;\r\n        }\r\n\r\n        return this.fieldRequired();\r\n    }\r\n\r\n    selectPlaceholder() {\r\n        let text = '';\r\n\r\n        if (app.forum.attribute('litalino-mason.labels-as-placeholders')) {\r\n            text += this.fieldLabel() + ' - ';\r\n        }\r\n\r\n        if (this.fieldRequired()) {\r\n            text += app.translator.trans('litalino-mason.forum.answers.choose-option');\r\n        } else {\r\n            text += app.translator.trans('litalino-mason.forum.answers.no-option-selected');\r\n        }\r\n\r\n        return text;\r\n    }\r\n}\r\n","import app from 'flarum/forum/app';\r\nimport Component from 'flarum/common/Component';\r\nimport chunkArray from '../helpers/chunkArray';\r\n\r\nexport default class FieldGrid extends Component {\r\n    view() {\r\n        return (\r\n            <div className=\"Mason-Grid-Wrapper\">\r\n                <div className=\"Mason-Grid\">\r\n                    {chunkArray(this.attrs.items, app.forum.attribute('litalino-mason.column-count')).map((row) => (\r\n                        <div className=\"Mason-Row Form-group\">\r\n                            {row.map((item) => (item))}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/**\r\n * Split an array into multiple arrays of a given size.\r\n *\r\n * Useful for grid layouts.\r\n *\r\n * @see https://stackoverflow.com/a/64777515/11091039\r\n * @param arr Array of items\r\n * @param size Number of items per array\r\n */\r\nexport default function chunkArray<T>(arr: T[], size: number): T[][] {\r\n    return Array(Math.ceil(arr.length / size))\r\n        .fill(undefined)\r\n        .map((_, i) => arr.slice(size * i, size + size * i));\r\n}\r\n","import app from 'flarum/forum/app';\r\nimport icon from 'flarum/common/helpers/icon';\r\nimport ItemList from 'flarum/common/utils/ItemList';\r\nimport Component from 'flarum/common/Component';\r\nimport classList from 'flarum/common/utils/classList';\r\n\r\nimport sortByAttribute from '@common/helpers/sortByAttribute';\r\nimport FieldEditDropdown from './FieldEditDropdown';\r\nimport FieldEditText from './FieldEditText';\r\nimport FieldEditTags from './FieldEditTags';\r\nimport FieldGrid from './FieldGrid';\r\n\r\nexport default class FieldsEditor extends Component {\r\n    oninit(vnode) {\r\n        super.oninit(vnode);\r\n\r\n        this.fields = sortByAttribute(app.store.all('mason-fields'));\r\n\r\n        // Index to quickly do a reverse lookup from answer to field\r\n        this.answerToFieldIndex = [];\r\n        this.fields.forEach((field) => {\r\n            const answers = field.suggestedAnswers();\r\n\r\n            // Since we silenced the error everywhere else using `|| []`, we'll keep just one place here\r\n            // where we log a warning if the relationship appears to be missing\r\n            // This should help troubleshooting what happens if no answers are offered\r\n            if (!Array.isArray(answers)) {\r\n                console.warn('[mason] Missing suggestedAnswers relationship for field', field);\r\n\r\n                return;\r\n            }\r\n\r\n            answers.forEach((answer) => {\r\n                this.answerToFieldIndex[answer.id()] = field.id();\r\n            });\r\n        });\r\n    }\r\n\r\n    view() {\r\n        return (\r\n            <div className=\"Mason-Fields Mason-Fields--editor\">\r\n                {this.headItems().toArray()}\r\n                <FieldGrid items={this.fieldItems().toArray()} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    updateSelection(field, fieldAnswers) {\r\n        // Keep only answers to other fields\r\n        let answers = this.attrs.answers.filter((answer) => {\r\n            const reverseFieldLookup = this.answerToFieldIndex[answer.id()];\r\n\r\n            // If the answer is not in the reverse lookup table it's probably a non-suggested (user) answer\r\n            // In that case the field should be linked in the relationship\r\n            if (typeof reverseFieldLookup === 'undefined') {\r\n                return answer.field().id() !== field.id();\r\n            }\r\n\r\n            return reverseFieldLookup !== field.id();\r\n        });\r\n\r\n        answers = answers.concat(fieldAnswers);\r\n\r\n        this.attrs.onchange(answers);\r\n    }\r\n\r\n    headItems() {\r\n        const items = new ItemList();\r\n\r\n        if (app.forum.attribute('litalino-mason.fields-section-title')) {\r\n            items.add('title', <h5 className=\"Mason-Field--title\">{app.forum.attribute('litalino-mason.fields-section-title')}</h5>);\r\n        }\r\n\r\n        return items;\r\n    }\r\n\r\n    fieldItems() {\r\n        const items = new ItemList();\r\n\r\n        if (app.forum.attribute('litalino-mason.tags-as-fields')) {\r\n            items.add(\r\n                'tags',\r\n                <FieldEditTags\r\n                    discussion={this.attrs.discussion}\r\n                    onchange={(tags) => {\r\n                        this.attrs.ontagchange && this.attrs.ontagchange(tags);\r\n                    }}\r\n                />\r\n            );\r\n        }\r\n\r\n        this.fields.forEach((field) => {\r\n            const inputAttrs = {\r\n                field,\r\n                answers: this.attrs.answers,\r\n                onchange: (fieldAnswers) => {\r\n                    // Every input component calls \"onchange\" with a list of answers from the store\r\n                    this.updateSelection(field, fieldAnswers);\r\n                },\r\n            };\r\n            let input = null;\r\n\r\n            if (field.user_values_allowed()) {\r\n                input = <FieldEditText {...inputAttrs} />;\r\n            } else {\r\n                input = <FieldEditDropdown {...inputAttrs} />;\r\n            }\r\n\r\n            items.add(\r\n                `field-${field.id()}`,\r\n                <div\r\n                    class={classList('Mason-Field Form-group', {\r\n                        ['Mason-Field--label-as-placeholder']: app.forum.attribute('litalino-mason.labels-as-placeholders'),\r\n                    })}\r\n                >\r\n                    <label>\r\n                        {field.icon() ? <>{icon(field.icon())} </> : null}\r\n                        {field.name()}\r\n                        {field.required() ? ' *' : null}\r\n                    </label>\r\n                    {input}\r\n                    {field.description() ? <div className=\"helpText\">{field.description()}</div> : null}\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return items;\r\n    }\r\n}\r\n","import app from 'flarum/forum/app';\r\nimport icon from 'flarum/common/helpers/icon';\r\nimport ItemList from 'flarum/common/utils/ItemList';\r\nimport Component from 'flarum/common/Component';\r\nimport classList from 'flarum/common/utils/classList';\r\n\r\nimport sortByAttribute from '@common/helpers/sortByAttribute';\r\nimport FieldEditDropdown from './FieldEditDropdown';\r\nimport FieldEditText from './FieldEditText';\r\nimport FieldEditTags from './FieldEditTags';\r\nimport FieldGrid from './FieldGrid';\r\n\r\nexport default class FieldsEditorByTags extends Component {\r\n    oninit(vnode) {\r\n        super.oninit(vnode);\r\n\r\n        this.fields = sortByAttribute(app.store.all('mason-fields'));\r\n\r\n        // Index to quickly do a reverse lookup from answer to field\r\n        this.answerToFieldIndex = [];\r\n        this.fields.forEach((field) => {\r\n            const answers = field.suggestedAnswers();\r\n\r\n            // Since we silenced the error everywhere else using `|| []`, we'll keep just one place here\r\n            // where we log a warning if the relationship appears to be missing\r\n            // This should help troubleshooting what happens if no answers are offered\r\n            if (!Array.isArray(answers)) {\r\n                console.warn('[mason] Missing suggestedAnswers relationship for field', field);\r\n\r\n                return;\r\n            }\r\n\r\n            answers.forEach((answer) => {\r\n                this.answerToFieldIndex[answer.id()] = field.id();\r\n            });\r\n        });\r\n    }\r\n\r\n    view() {\r\n        return (\r\n            <div className=\"Mason-Fields Mason-Fields--editor\">\r\n                {this.headItems().toArray()}\r\n                <FieldGrid items={this.fieldItems().toArray()} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    updateSelection(field, fieldAnswers) {\r\n        // Keep only answers to other fields\r\n        let answers = this.attrs.answers.filter((answer) => {\r\n            const reverseFieldLookup = this.answerToFieldIndex[answer.id()];\r\n\r\n            // If the answer is not in the reverse lookup table it's probably a non-suggested (user) answer\r\n            // In that case the field should be linked in the relationship\r\n            if (typeof reverseFieldLookup === 'undefined') {\r\n                return answer.field().id() !== field.id();\r\n            }\r\n\r\n            return reverseFieldLookup !== field.id();\r\n        });\r\n\r\n        answers = answers.concat(fieldAnswers);\r\n\r\n        this.attrs.onchange(answers);\r\n    }\r\n\r\n    headItems() {\r\n        const items = new ItemList();\r\n\r\n        if (app.forum.attribute('litalino-mason.fields-section-title')) {\r\n            items.add('title', <h5 className=\"Mason-Field--title\">{app.forum.attribute('litalino-mason.fields-section-title')}</h5>);\r\n        }\r\n        return items;\r\n    }\r\n\r\n    fieldItems() {\r\n        const items = new ItemList();\r\n\r\n        // taking this feature off beacuse changing tags will affect which fields show up\r\n\r\n        // if (app.forum.attribute('litalino-mason.tags-as-fields')) {\r\n        //     items.add(\r\n        //         'tags',\r\n        //         <FieldEditTags\r\n        //             discussion={this.attrs.discussion}\r\n        //             onchange={(tags) => {\r\n        //                 this.attrs.ontagchange && this.attrs.ontagchange(tags);\r\n        //             }}\r\n        //         />\r\n        //     );\r\n        // }\r\n\r\n        this.fields.forEach((field) => {\r\n            const inputAttrs = {\r\n                field,\r\n                bytags: this.attrs.bytags,\r\n                inputId: field.data.id,\r\n                answers: this.attrs.answers,\r\n                onchange: (fieldAnswers) => {\r\n                    // Every input component calls \"onchange\" with a list of answers from the store\r\n                    this.updateSelection(field, fieldAnswers);\r\n                },\r\n            };\r\n            let input = null;\r\n\r\n            if (field.user_values_allowed()) {\r\n                input = <FieldEditText {...inputAttrs} />;\r\n            } else {\r\n                input = <FieldEditDropdown {...inputAttrs} />;\r\n            }\r\n\r\n            this.attrs.bytags.forEach((tag) => {\r\n                // filter the items list for fields we actually need\r\n                if (tag == field.data.attributes.name) {\r\n                    items.add(\r\n                        `field-${field.id()}`,\r\n                        <div\r\n                            class={classList('Mason-Field Form-group', {\r\n                                ['Mason-Field--label-as-placeholder']: app.forum.attribute('litalino-mason.labels-as-placeholders'),\r\n                            })}\r\n                        >\r\n                            <label>\r\n                                {field.icon() ? <>{icon(field.icon())} </> : null}\r\n                                {field.name()}\r\n                                {field.required() ? ' *' : null}\r\n                            </label>\r\n                            {input}\r\n                            {field.description() ? <div className=\"helpText\">{field.description()}</div> : null}\r\n                        </div>\r\n                    );\r\n                }\r\n            });\r\n        });\r\n\r\n        return items;\r\n    }\r\n}\r\n","import app from 'flarum/forum/app';\r\nimport Component from 'flarum/common/Component';\r\n\r\nexport default class ByTagsComposer extends Component {\r\n    matchTags() {\r\n        // build an array of Tags with the fields that match them\r\n\r\n        const tags = app.store.all('tags');\r\n        let tagsList = [];\r\n\r\n        let tempStorage = app.store.all('mason-bytags');\r\n        var usedList = [];\r\n\r\n        for (let i = 0; i < tags.length; i++) {\r\n            let fields = [];\r\n            let fieldIDs = [];\r\n            var tagName = tags[i].data.attributes.name;\r\n            let tagsObj = {};\r\n\r\n            usedList = tempStorage.filter((match) => match.data.attributes.tag_name == tagName && match.data.attributes.switch == true);\r\n\r\n            // It may be better to create an object with all the Tags represented\r\n            // even if they have no fields enabled. Turn this conditional back off if so.\r\n            if (usedList[0]) {\r\n                usedList.forEach(function (e) {\r\n                    fields.push(e.data.attributes.field_name);\r\n                    fieldIDs.push(e.data.id);\r\n                });\r\n\r\n                tagsObj = { tagName, fields, fieldIDs };\r\n                tagsList.push(tagsObj);\r\n            }\r\n        }\r\n\r\n        return tagsList;\r\n    }\r\n}\r\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['tags/components/TagDiscussionModal'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/utils/DiscussionControls'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Button'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Modal'];","import app from 'flarum/forum/app';\nimport Modal from 'flarum/common/components/Modal';\nimport Button from 'flarum/common/components/Button';\nimport FieldsEditor from './FieldsEditor';\nimport FieldsEditorByTags from './FieldsEditorByTags';\nimport ByTagsComposer from './ByTagsComposer';\n\nexport default class FieldsEditorModal extends Modal {\n    oninit(vnode) {\n        super.oninit(vnode);\n\n        this.answers = this.attrs.discussion.masonAnswers();\n        this.dirty = false;\n        this.processing = false;\n        this.tagRelationship = this.attrs.discussion.data.relationships.tags.data[0];\n        this.byTagEnabled = app.data.resources[0].attributes['litalino-mason.by-tag'];\n\n        // Stays null if the feature is not used\n        this.tags = null;\n\n        let ByTagsUnit = new ByTagsComposer();\n        const matchingTags = ByTagsUnit.matchTags();\n        this.myFields = [];\n\n        // annoying way to get current Tag name, but it works\n        let thisIncludes = this.attrs.discussion.payload?.included;\n        const findTag = thisIncludes?.find((element) => element.type == 'tags');\n\n        for (let i = 0; i < matchingTags.length; i++) {\n            if (matchingTags[i].tagName == findTag?.attributes.name) {\n                this.myFields = matchingTags[i].fields;\n            }\n        }\n    }\n\n    title() {\n        return app.translator.trans('litalino-mason.forum.answers-modal.edit-title', {\n            title: <em>{this.attrs.discussion.title()}</em>,\n        });\n    }\n\n    content() {\n        return (\n            <>\n                <div className=\"Modal-body\">\n                    {\n                        this.byTagEnabled ?\n                        <FieldsEditorByTags\n                            discussion={this.attrs.discussion} // Only for the tags feature\n                            answers={this.answers}\n                            bytags={this.myFields}\n                            tags={this.tags}\n                            onchange={this.answersChanged.bind(this)}\n                        />\n                        :\n                        <FieldsEditor\n                            discussion={this.attrs.discussion} // Only for the tags feature\n                            answers={this.answers}\n                            onchange={this.answersChanged.bind(this)}\n                            ontagchange={(tags) => {\n                                this.tags = tags;\n                                this.dirty = true;\n                            }}\n                        />\n                    }\n                </div>\n                <div className=\"Modal-footer\">\n                    <Button className=\"Button Button--primary\" loading={this.processing} disabled={!this.dirty} onclick={this.saveAnswers.bind(this)}>\n                        {app.translator.trans('litalino-mason.forum.answers-modal.save')}\n                    </Button>\n                </div>\n            </>\n        );\n    }\n\n    answersChanged(answers) {\n        this.answers = answers;\n        this.dirty = true;\n    }\n\n    saveAnswers() {\n        this.processing = true;\n\n        let tagRelationship = {\n            data: this.tagRelationship,\n        };\n        let relationships = {\n            tags: [tagRelationship],\n            masonAnswers: this.answers,\n        };\n\n        // If tag edit is enabled, take care of them here as well\n        // if (this.tags !== null) {\n        //     relationships.tags = this.tags;\n        // }\n\n        // Use a temporary discussion object\n        // Otherwise Flarum persists the relationships to the model while the request is still processing\n        // Which causes errors with components outside of the modal redrawing and reading non-persisted data\n        // The real discussion will be updated automatically by the store once the request completes which is all we need\n        const temporaryDiscussion = app.store.createRecord('discussions');\n        temporaryDiscussion.pushData({ id: this.attrs.discussion.id() });\n        temporaryDiscussion.exists = true;\n\n        temporaryDiscussion\n            .save({\n                relationships,\n            })\n            .then(() => {\n                this.processing = false;\n                app.modal.close();\n                m.redraw();\n            })\n            .catch((err) => {\n                this.processing = false;\n                throw err;\n            });\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/DiscussionHero'];","import app from 'flarum/forum/app';\r\nimport icon from 'flarum/common/helpers/icon';\r\nimport ItemList from 'flarum/common/utils/ItemList';\r\nimport Component from 'flarum/common/Component';\r\nimport Button from 'flarum/common/components/Button';\r\nimport FieldsEditorModal from './FieldsEditorModal';\r\nimport FieldGrid from './FieldGrid';\r\nimport sortByAttribute from '@common/helpers/sortByAttribute';\r\n\r\nexport default class FieldsViewer extends Component {\r\n    oninit(vnode) {\r\n        super.oninit(vnode);\r\n\r\n        this.fields = sortByAttribute(app.store.all('mason-fields'));\r\n        this.discussion = this.attrs.discussion;\r\n    }\r\n\r\n    view() {\r\n        const head = this.headItems().toArray();\r\n        const fields = this.fieldsItems().toArray();\r\n\r\n        // If all fields are hidden\r\n        // And either no controls are shown or the setting hides them\r\n        // We don't show the viewer\r\n        if (!fields.length && (!head.length || app.forum.attribute('litalino-mason.hide-empty-fields-section'))) {\r\n            // We need to return an actual dom element or Flarum does not like it\r\n            return <div />;\r\n        }\r\n\r\n        return (\r\n            <div className=\"Mason-Fields Mason-Fields--viewer\">\r\n                {head}\r\n                <FieldGrid items={fields} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    headItems() {\r\n        const items = new ItemList();\r\n\r\n        if (this.discussion.canUpdateMasonAnswers()) {\r\n            items.add(\r\n                'edit',\r\n                <Button\r\n                    className=\"Button Mason-Fields--edit\"\r\n                    icon=\"fas fa-pen\"\r\n                    onclick={() =>\r\n                        app.modal.show(FieldsEditorModal, {\r\n                            discussion: this.discussion,\r\n                        })\r\n                    }\r\n                >\r\n                    {app.translator.trans('litalino-mason.forum.discussion-controls.edit-answers')}\r\n                </Button>\r\n            );\r\n        }\r\n\r\n        if (app.forum.attribute('litalino-mason.fields-section-title')) {\r\n            items.add('title', <h5 className=\"Mason-Field--title\">{app.forum.attribute('litalino-mason.fields-section-title')}</h5>);\r\n        }\r\n\r\n        return items;\r\n    }\r\n\r\n    fieldsItems() {\r\n        const items = new ItemList();\r\n\r\n        this.fields.forEach((field) => {\r\n            // Discussion answers to this field\r\n            const answers = sortByAttribute(\r\n                (this.discussion.masonAnswers() || []).filter((answer) => {\r\n                    // It's necessary to compare the field() relationship\r\n                    // Because field.suggestedAnswers() won't contain new and user answers\r\n                    return answer.field() && answer.field().id() === field.id();\r\n                })\r\n            );\r\n\r\n            let answer_list = answers.map((answer) => <span className=\"Mason-Inline-Answer\">{answer.content()}</span>);\r\n\r\n            if (answers.length === 0) {\r\n                if (field.show_when_empty()) {\r\n                    answer_list.push(<em className=\"Mason-Inline-Answer\">{app.translator.trans('litalino-mason.forum.post-answers.no-answer')}</em>);\r\n                } else {\r\n                    // If the field has no answer and the setting is off we don't show it\r\n                    return;\r\n                }\r\n            }\r\n\r\n            items.add(\r\n                `field-${field.id()}`,\r\n                <div className=\"Mason-Field Form-group\">\r\n                    <label>\r\n                        {field.icon() ? <>{icon(field.icon())} </> : null}\r\n                        {field.name()}\r\n                    </label>\r\n                    <div className=\"FormControl Mason-Inline-Answers\">{answer_list}</div>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        return items;\r\n    }\r\n}\r\n","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/CommentPost'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/DiscussionPage'];","import { extend } from 'flarum/common/extend';\r\nimport app from 'flarum/forum/app';\r\nimport CommentPost from 'flarum/common/components/CommentPost';\r\nimport DiscussionPage from 'flarum/common/components/DiscussionPage';\r\nimport FieldsViewer from './components/FieldsViewer';\r\n\r\nfunction showFieldsOnPost(post) {\r\n    // The CommentPost component is also visible on the user profile, but we don't want to render the fields there\r\n    if (!app.current.matches(DiscussionPage)) {\r\n        return false;\r\n    }\r\n\r\n    // We only add fields to the first post, and only if fields are not displayed in the hero\r\n    // TODO: what if the first post is deleted ?\r\n    return post.number() === 1 && !app.forum.attribute('litalino-mason.fields-in-hero');\r\n}\r\n\r\nexport default function () {\r\n    extend(CommentPost.prototype, 'oninit', function () {\r\n        if (!this.attrs.post.discussion().canSeeMasonAnswers() || !showFieldsOnPost(this.attrs.post)) {\r\n            return;\r\n        }\r\n\r\n        this.subtree.check(() => {\r\n            // Create a string with all answer ids\r\n            // If answers change this string will be different\r\n            return (this.attrs.post.discussion().masonAnswers() || [])\r\n                .map((answer) => {\r\n                    // Sometimes answer will be undefined while the data is being saved in FieldsEditorModal\r\n                    if (!answer) {\r\n                        return '';\r\n                    }\r\n\r\n                    // There is a time after discussion.save() is called but before the data included in response is parsed\r\n                    // where Flarum will already have updated the relationship, but answer.field will be missing and this causes\r\n                    // the field to be skipped in FieldsViewer. So we also need to check the load status of that relationship\r\n                    return JSON.stringify([answer.id(), !!answer.field()]);\r\n                })\r\n                .join(',');\r\n        });\r\n    });\r\n\r\n    extend(CommentPost.prototype, 'content', function (content) {\r\n        if (!this.attrs.post.discussion().canSeeMasonAnswers() || !showFieldsOnPost(this.attrs.post)) {\r\n            return;\r\n        }\r\n\r\n        const postHeaderIndex = content.findIndex((item) => item.attrs && item.attrs.className === 'Post-header');\r\n\r\n        // Insert the new content just after the header\r\n        // or at the very beginning if the header is not found\r\n        content.splice(postHeaderIndex === -1 ? 0 : postHeaderIndex + 1, 0, <FieldsViewer discussion={this.attrs.post.discussion()} />);\r\n    });\r\n}\r\n","import app from 'flarum/forum/app';\r\nimport Model from 'flarum/common/Model';\r\nimport Discussion from 'flarum/common/models/Discussion';\r\nimport Forum from 'flarum/common/models/Forum';\r\nimport Answer from '@common/models/Answer';\r\nimport Field from '@common/models/Field';\r\nimport ByTag from '@common/models/ByTag';\r\nimport addComposerFields from './addComposerFields';\r\nimport addFieldUpdateControl from './addFieldUpdateControl';\r\nimport addFieldsOnDiscussionHero from './addFieldsOnDiscussionHero';\r\nimport addFieldsOnDiscussionPost from './addFieldsOnDiscussionPost';\r\nimport patchModelIdentifier from './patchModelIdentifier';\r\n\r\napp.initializers.add('litalino-mason', (app) => {\r\n    app.store.models['mason-fields'] = Field;\r\n    app.store.models['mason-answers'] = Answer;\r\n    app.store.models['mason-bytags'] = ByTag;\r\n\r\n    Discussion.prototype.masonAnswers = Model.hasMany('masonAnswers');\r\n    Discussion.prototype.canSeeMasonAnswers = Model.attribute('canSeeMasonAnswers');\r\n    Discussion.prototype.canUpdateMasonAnswers = Model.attribute('canUpdateMasonAnswers');\r\n    Forum.prototype.canFillMasonFields = Model.attribute('canFillMasonFields');\r\n\r\n    addComposerFields();\r\n    addFieldsOnDiscussionHero();\r\n    addFieldsOnDiscussionPost();\r\n    addFieldUpdateControl();\r\n    patchModelIdentifier();\r\n});\r\n","import { extend } from 'flarum/common/extend';\nimport app from 'flarum/forum/app';\nimport DiscussionComposer from 'flarum/common/components/DiscussionComposer';\nimport Composer from 'flarum/components/Composer';\nimport FieldsEditor from './components/FieldsEditor';\nimport FieldsEditorByTags from './components/FieldsEditorByTags';\nimport ByTagsComposer from './components/ByTagsComposer';\nimport TagDiscussionModal from 'flarum/tags/components/TagDiscussionModal';\n//import FieldsEditorAll from './components/FieldsEditorAll';\n\nexport default function () {\n    DiscussionComposer.prototype.masonAnswers = [];\n    let byTagEnabled = app.data.resources[0].attributes['litalino-mason.by-tag'];\n    let ByTagsUnit = new ByTagsComposer();\n    let dTag = '';\n    var tagChanged = '';\n\n    extend(TagDiscussionModal.prototype, 'onsubmit', function (e) {\n        // get name of the tag selected in the modal\n\n        if (this.selected == false) {\n            // if no tag is selected, empty the header\n            dTag = '';\n            return;\n        }\n\n        dTag = this.selected[0].data.attributes.name;\n    });\n\n    extend(Composer.prototype, 'hide', function (e) {\n        // remove the the fields from the headerItems...\n        dTag = '';\n    });\n\n    extend(DiscussionComposer.prototype, 'headerItems', function (items) {\n        if (!app.forum.canFillMasonFields()) {\n            return;\n        }\n\n        // so this list contains whether a tag has fields!\n        const matchingTags = ByTagsUnit.matchTags();\n\n        // console.log(matchingTags);\n\n        if (byTagEnabled) {\n            this.myFields = [];\n            const matchingTagNames = [];\n\n            for (let i = 0; i < matchingTags.length; i++) {\n                if (matchingTags[i].tagName == dTag) {\n                    this.myFields = matchingTags[i].fields;\n                }\n                matchingTagNames.push(matchingTags[i].tagName);\n            }\n            // this.myFields is a list of fields that match the selected tag only\n\n            if (tagChanged != dTag) {\n                // clear the decks after every tag change\n                this.composer.fields.masonAnswers = [];\n                tagChanged = dTag;\n            }\n\n            //items.add(\n            //    'mason-fields',\n            //    <FieldsEditorByTags\n            //        bytags={this.myFields}\n            //        tags={this.composer.fields.tags}\n            //        answers={this.composer.fields.masonAnswers || []}\n            //        onchange={(answers) => {\n            //           this.composer.fields.masonAnswers = answers;\n            //        }}\n            //    />\n            //);\n\n            const selectedTags = this.composer.fields.tags;\n            //console.log(this.composer.fields.tags);\n\n            if (!Array.isArray(selectedTags)) {\n              return false;\n            }\n      \n            selectedTags.some((tag) => {\n              if (matchingTagNames.toString().includes(tag.name())) {\n                //console.log(tag.name());\n                //console.log(tag.id());\n                //console.log(this.composer.fields.tags);\n                if (tag.id()) {\n\n                  items.add(\n                    'mason-fields',\n                    <FieldsEditorByTags\n                        //discussion={this.attrs.discussion}\n                        bytags={this.myFields}\n                        tags={this.composer.fields.tags}\n                        answers={this.composer.fields.masonAnswers || []}\n                        onchange={(answers) => {\n                            this.composer.fields.masonAnswers = answers;\n                        }}\n                    />\n                  );\n                  \n                } else {\n                  items.add(\n                    'mason-fields',\n                    <FieldsEditor\n                        answers={this.composer.fields.masonAnswers || []}\n                        onchange={(answers) => {\n                            this.composer.fields.masonAnswers = answers;\n                        }}\n                        ontagchange={(tags) => {\n                            this.composer.fields.tags = tags;\n                        }}\n                    />\n                  );\n                }\n              }\n            });\n\n        }\n    });\n\n    extend(DiscussionComposer.prototype, 'data', function (data) {\n        if (!app.forum.canFillMasonFields() || !this.composer.fields.masonAnswers) {\n            return;\n        }\n\n        data.relationships = data.relationships || {};\n        data.relationships.masonAnswers = this.composer.fields.masonAnswers;\n    });\n}\n","import { extend, override } from 'flarum/common/extend';\r\nimport app from 'flarum/forum/app';\r\nimport DiscussionHero from 'flarum/common/components/DiscussionHero';\r\nimport Composer from 'flarum/components/Composer';\r\nimport FieldsViewer from './components/FieldsViewer';\r\n\r\nexport default function () {\r\n    extend(DiscussionHero.prototype, 'items', function (items) {\r\n        if (!this.attrs.discussion.canSeeMasonAnswers() || !app.forum.attribute('litalino-mason.fields-in-hero')) {\r\n            return;\r\n        }\r\n\r\n        items.add('mason-fields', <FieldsViewer discussion={this.attrs.discussion} />);\r\n    });\r\n\r\n    override(Composer.prototype, 'animateToPosition', function (original, position) {\r\n        // we need to detect if there are any mason fields present and if there are\r\n        // add their height to the default height of the composer window\r\n        const $composer = this.$().stop(true);\r\n        const composerHeight = $composer.outerHeight();\r\n        m.redraw(true);\r\n        $composer.show();\r\n\r\n        //const $composer = this.$();\r\n        const headerHeight = this.$('.ComposerBody-header').outerHeight();\r\n\r\n        if (position === Composer.PositionEnum.NORMAL && composerHeight < headerHeight) {\r\n            this.height = headerHeight + composerHeight;\r\n            this.updateHeight();\r\n        }\r\n\r\n        return original(position);\r\n    });\r\n}\r\n","import app from 'flarum/forum/app';\r\nimport { extend } from 'flarum/common/extend';\r\nimport DiscussionControls from 'flarum/forum/utils/DiscussionControls';\r\nimport Button from 'flarum/common/components/Button';\r\nimport FieldsEditorModal from './components/FieldsEditorModal';\r\n\r\nexport default function () {\r\n    extend(DiscussionControls, 'moderationControls', function (items, discussion) {\r\n        if (discussion.canUpdateMasonAnswers()) {\r\n            items.add(\r\n                'mason-update-answers',\r\n                <Button icon=\"fas fa-tag\" onclick={() => app.modal.show(FieldsEditorModal, { discussion })}>\r\n                    {app.translator.trans('litalino-mason.forum.discussion-controls.edit-answers')}\r\n                </Button>\r\n            );\r\n        }\r\n    });\r\n}\r\n","import { override } from 'flarum/common/extend';\r\nimport Model from 'flarum/common/Model';\r\nimport Answer from '@common/models/Answer';\r\n\r\nexport default function () {\r\n    override(Model, 'getIdentifier', function (original, model) {\r\n        // For Answers that don't yet exist, we include the content and the field relationship when calling the API\r\n        // That way they can be created server-side without making individual API requests for each answer\r\n        if (model instanceof Answer && !model.exists) {\r\n            return {\r\n                type: model.data.type,\r\n                attributes: {\r\n                    content: model.data.attributes.content,\r\n                },\r\n                relationships: {\r\n                    field: {\r\n                        data: Model.getIdentifier(model.data.relationships.field),\r\n                    },\r\n                },\r\n            };\r\n        }\r\n\r\n        // Default behaviour\r\n        return original(model);\r\n    });\r\n}\r\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","core","compat","_setPrototypeOf","p","setPrototypeOf","bind","__proto__","_inheritsLoose","subClass","superClass","create","constructor","Answer","_Model","_this","_len","arguments","length","args","Array","_key","apply","concat","content","Model","is_suggested","sort","field","apiEndpoint","this","exists","data","id","Field","name","description","min_answers_count","max_answers_count","show_when_empty","user_values_allowed","validation","icon","deleted_at","allAnswers","suggestedAnswers","required","computed","multiple","ByTag","tag_name","tag_id","field_name","sortByAttribute","items","attr","b","FieldEditDropdown","_Component","_proto","view","vnode","_vnode$attrs","attrs","answers","onchange","selectedAnswerIdsForThisField","forEach","answer","findIndex","push","relationshipInfo","m","className","event","_step","_iterator","_createForOfIteratorHelperLoose","target","options","done","option","selected","answerId","storeObj","app","getById","relationships","disabled","hidden","placeholderHidden","selectPlaceholder","map","indexOf","attribute","text","trans","Component","FieldEditText","oninit","inputId","answersForThisField","filter","_this2","class","oninput","e","createRecord","attributes","placeholder","fieldPlaceholder","DiscussionFields","tags","all","selectedTags","discussion","tag","canAddToDiscussion","canStartDiscussion","minPrimary","maxPrimary","minSecondary","maxSecondary","isPrimary","sortTags","inputUuid","Math","random","toString","substring","_classList","currentSelectedChild","parent","fieldRequired","classList","for","fieldLabel","find","FieldGrid","arr","size","ceil","fill","undefined","_","i","slice","row","item","FieldsEditor","fields","answerToFieldIndex","isArray","console","warn","headItems","toArray","fieldItems","updateSelection","fieldAnswers","reverseFieldLookup","ItemList","add","_this3","FieldEditTags","ontagchange","input","inputAttrs","'['","FieldsEditorByTags","bytags","ByTagsComposer","matchTags","tagsList","tempStorage","usedList","_loop","fieldIDs","tagName","tagsObj","match","FieldsEditorModal","_Modal","_this$attrs$discussio","masonAnswers","dirty","processing","tagRelationship","byTagEnabled","resources","matchingTags","myFields","thisIncludes","payload","included","findTag","element","type","title","answersChanged","Button","loading","onclick","saveAnswers","temporaryDiscussion","pushData","save","then","close","redraw","err","Modal","FieldsViewer","head","fieldsItems","canUpdateMasonAnswers","show","answer_list","showFieldsOnPost","post","matches","DiscussionPage","number","store","models","Discussion","canSeeMasonAnswers","Forum","canFillMasonFields","DiscussionComposer","ByTagsUnit","dTag","tagChanged","extend","TagDiscussionModal","Composer","matchingTagNames","composer","some","includes","addComposerFields","DiscussionHero","override","original","position","$composer","$","stop","composerHeight","outerHeight","headerHeight","NORMAL","height","updateHeight","CommentPost","subtree","check","JSON","stringify","join","postHeaderIndex","splice","DiscussionControls","model"],"sourceRoot":""}